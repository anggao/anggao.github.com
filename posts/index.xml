<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Ang's Blog</title><link>http://anggao.github.io/posts/</link><description>All Posts | Ang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 20 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://anggao.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Matplotlib Basic</title><link>http://anggao.github.io/2020-10-20-matplotlib-basic/</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2020-10-20-matplotlib-basic/</guid><description>1 2 3 4 import matplotlib.pyplot as plt plt.figure(figsize=(10, 10), dpi=100) plt.plot([1, 2, 3, 4, 5, 6 ,7], [17,17,18,15,11,11,13]) plt.show() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import matplotlib.pyplot as plt import random x = range(50) weather = [random.uniform(15, 18) for i in x] plt.figure(figsize=(20, 10), dpi=100) plt.plot(x, weather) x_ticks_label = [f&amp;#34;11:{i}&amp;#34; for i in x] y_ticks = range(50) plt.</description></item><item><title>Install Arch Linux in virtualbox</title><link>http://anggao.github.io/2020-10-12-install-arch-linux-in-virtualbox/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2020-10-12-install-arch-linux-in-virtualbox/</guid><description>Pre-installation Acquire an installation image Arch is a “rolling release” distribution, download the .iso file from its offical site.
Create VM Create a vm in virtualbox, make sure enable EFI in the motherboard. We will use use UEFI instead of the older BIOS spec to boot the VM.
Verify the boot mode To verify the boot mode, list the efivars directory:
1 # ls /sys/firmware/efi/efivars If the command shows the directory without error, then the system is booted in UEFI mode.</description></item><item><title>KEDA for custom metrics based HPA</title><link>http://anggao.github.io/2020-08-19-keda/</link><pubDate>Wed, 19 Aug 2020 22:15:02 +0100</pubDate><author>Author</author><guid>http://anggao.github.io/2020-08-19-keda/</guid><description>KEDA is a Kubernetes-based Event Driven Autoscaler. With KEDA, you can drive the scaling of any container in Kubernetes based on the number of events needing to be processed.
The following demo is based on the examples here
Install KEDA Follow setups in KEDA docs
I used Helm 3 method
1 2 kubectl create namespace keda helm install keda kedacore/keda --namespace keda Install Prometheus 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 apiVersion: rbac.</description></item><item><title>Service Mesh01</title><link>http://anggao.github.io/2020-07-29-service-mesh01/</link><pubDate>Wed, 29 Jul 2020 12:59:24 +0100</pubDate><author>Author</author><guid>http://anggao.github.io/2020-07-29-service-mesh01/</guid><description>微服务架构的特性 围绕业务构建团队 Conway&amp;rsquo;s Law Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization&amp;rsquo;s communication structure. 去中心化的数据管理 Fallacies of distributed computing The network is reliable; Latency is zero; Bandwidth is infinite; The network is secure; Topology doesn&amp;rsquo;t change;</description></item><item><title>Setup Kubernetes Cluster with Kind</title><link>http://anggao.github.io/2020-02-01-kind-cluster/</link><pubDate>Sat, 01 Feb 2020 22:39:50 +0100</pubDate><author>Author</author><guid>http://anggao.github.io/2020-02-01-kind-cluster/</guid><description>Intro kind is a tool for running local Kubernetes clusters using Docker container “nodes”. kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.
Setup Golang development Install Go tools. Follow docs. Config $GOROOT and $GOPATH $GOROOT is for compiler/tools that comes from go installation. This should be configured to the go directory that was installed. $GOPATH is for your own go projects / 3rd party libraries (downloaded with &amp;ldquo;go get&amp;rdquo;).</description></item><item><title>Basic Markdown Syntax</title><link>http://anggao.github.io/hugo/</link><pubDate>Sun, 01 Dec 2019 21:57:40 +0800</pubDate><author>Author</author><guid>http://anggao.github.io/hugo/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files.&lt;/p></description></item><item><title>Kind Cluster issue</title><link>http://anggao.github.io/2020-03-01-kind-cluster-xfs/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2020-03-01-kind-cluster-xfs/</guid><description>To use Kind cluster you need to have overlay(2) storage driver with Docker if you are using XFS filesystem.
overlayfs-driver https://docs.docker.com/storage/storagedriver/overlayfs-driver/
The overlay and overlay2 drivers are supported on xfs backing filesystems, but only with d_type=true enabled.
1 2 3 4 5 6 7 8 9 10 11 xfs_info / meta-data=/dev/mapper/centos_agao isize=512 agcount=4, agsize=3276800 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0 spinodes=0 data = bsize=4096 blocks=13107200, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal bsize=4096 blocks=6400, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 The 3rd column of the 6th line of the xfs_info output is the most interesting because it contains the parameter ftype which should be 1.</description></item><item><title>Kubernetes Note 05</title><link>http://anggao.github.io/2019-02-20-k8s-05/</link><pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2019-02-20-k8s-05/</guid><description>对于一个 Deployment 所管理的 Pod，它的 ownerReference 是 ReplicaSet ReplicaSet 负责通过控制器模式，保证系统中 Pod 的个数永远等于指定的个数 Deployment 只允许容器的 restartPolicy=Always 水平扩展 $ kubectl scale deployment nginx-deployment --replicas=4 滚动更新 R</description></item><item><title>Kubernetes Note 04</title><link>http://anggao.github.io/2019-02-18-k8s-04/</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2019-02-18-k8s-04/</guid><description>容器健康检查和恢复机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 apiVersion:v1kind:Podmetadata:labels:test:livenessname:test-liveness-execspec:containers:- name:livenessimage:busyboxargs:- /bin/sh- -c- touch/tmp/healthy;sleep30;rm-rf/tmp/healthy;sleep600livenessProbe:exec:command:- cat- /tmp/healthyinitialDelaySeconds:5periodSeconds:5 Pod 的恢复过程，永远都是发生在当前节点上，而不会跑到别的节点上去</description></item><item><title>Kubernetes Note 03</title><link>http://anggao.github.io/2019-02-16-k8s-03/</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2019-02-16-k8s-03/</guid><description>使用一种 API 对象（Deployment）管理另一种 API 对象（Pod）的方法，在 Kubernetes 中，叫作“控制器”模式（controller pattern） 1 2</description></item></channel></rss>