<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>javascript - Tag - Ang's Blog</title><link>http://anggao.github.io/tags/javascript/</link><description>javascript - Tag - Ang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 07 Dec 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://anggao.github.io/tags/javascript/" rel="self" type="application/rss+xml"/><item><title>JavaScript Note Eleven</title><link>http://anggao.github.io/2015-12-07-javascript-note-eleven/</link><pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-12-07-javascript-note-eleven/</guid><description><![CDATA[HTTP  Sending a request  1 2 3 4 5 6 7 8 9  var req = new XMLHttpRequest(); req.open(&#34;GET&#34;, &#34;example/data.txt&#34;, false); req.send(null); consle.log(req.responseText); // → This is the content of data.txt console.log(req.status, req.statusText); // → 200 OK console.log(req.getResponseHeader(&#34;content-type&#34;)); // → text/plain    If we pass true as the third argument to open, the request is asynchronous.  1 2 3 4 5 6  var req = new XMLHttpRequest(); req.]]></description></item><item><title>JavaScript Note Ten</title><link>http://anggao.github.io/2015-10-16-javascript-note-ten/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-10-16-javascript-note-ten/</guid><description>JavaScript and the Browser In HTML, an ampersand (&amp;amp;) character followed by a word and a semicolon (;) is called an entity, and will be replaced by the character it encodes. A script tag must always be closed with &amp;lt;/script&amp;gt;, even if it refers to a script file and doesn’t contain any code. If you forget this, the rest of the page will be interpreted as part of the script.</description></item><item><title>JavaScript Note Nine</title><link>http://anggao.github.io/2015-09-19-javascript-note-nine/</link><pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-09-19-javascript-note-nine/</guid><description>The Document Object Model scans a document for text nodes containing a given string and returns true when it has found one 1 2 3 4 5 6 7 8 9 10 11 12 13 function talksAbout(node, string) { if (node.nodeType == document.ELEMENT_NODE) { for (var i = 0; i &amp;lt; node.childNodes.length; i++) { if (talksAbout(node.childNodes[i], string)) return true; } return false; } else if (node.nodeType == document.</description></item><item><title>JavaScript Note Eight</title><link>http://anggao.github.io/2015-09-18-javascript-note-eight/</link><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-09-18-javascript-note-eight/</guid><description>Project: A Programming Language We will build a programming language called Egg. Everything in Egg is an expression. An expression can be a variable, a number, a string, or an application. Applications are used for function calls but also for constructs such as if or while. And since the syntax has no concept of a block, we need a do construct to represent doing multiple things in sequence. The data structure that the parser will use to describe a program will consist of expression objects, each of which has a type property indicating the kind of expression it is and other properties to describe its content.</description></item><item><title>JavaScript Note Seven</title><link>http://anggao.github.io/2015-09-15-javascript-note-seven/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-09-15-javascript-note-seven/</guid><description><![CDATA[Modules  Though JavaScript provides no actual module construct yet, objects can be used to create publicly accessible subnamespaces, and functions can be used to create an isolated, private namespace inside of a module. Functions are the only things in JavaScript that create a new scope.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  var dayName = (function() { var names = [ &#34;Sunday&#34;, &#34;Monday&#34;, &#34;Tuesday&#34;, &#34;Wednesday&#34;, &#34;Thursday&#34;, &#34;Friday&#34;, &#34;Saturday&#34; ]; return function(number) { return names[number]; }; })(); console.]]></description></item><item><title>JavaScript Note Six</title><link>http://anggao.github.io/2015-09-09-javascript-note-six/</link><pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-09-09-javascript-note-six/</guid><description><![CDATA[Exceptions 1 2 3 4 5 6 7 8 9  try { (function() { throw new Error(&#34;Error !&#34;); })(); } catch (error) { console.log(&#34;Something went wrong: &#34; + error); } finally { console.log(&#34;finally called&#34;); }    JavaScript (in a rather glaring omission) doesn’t provide direct support for selectively catching exceptions We want to catch a specific kind of exception. We can do this by checking in the catch block whether the exception we got is the one we are interested in and by rethrowing it otherwise let’s define a new type of error and use instanceof to identify it.]]></description></item><item><title>JavaScript Note Five</title><link>http://anggao.github.io/2015-08-10-javascript-note-five/</link><pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-08-10-javascript-note-five/</guid><description><![CDATA[Chapter Six: The Secret Life of Objects  Methods are simply properties that hold function values There is a method similar to apply, called call. It also calls the function it is a method of but takes its arguments normally, rather than as an array. Like apply and bind, call can be passed a specific this value.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  var fn = function(arg1, arg2) { var str = &#34;&lt;p&gt;aap &#34; + this.]]></description></item><item><title>JavaScript Note Four</title><link>http://anggao.github.io/2015-07-19-javascript-note-four/</link><pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-07-19-javascript-note-four/</guid><description>Chapter Five: Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions. Higher-order functions allow us to abstract over actions, not just values. 1 2 3 4 5 function transparentWrapping(f) { return function() { return f.apply(null, arguments); }; } The function it returns passes all of the given arguments, and only those arguments, to f.</description></item><item><title>JavaScript Note Three</title><link>http://anggao.github.io/2015-07-07-javascript-note-three/</link><pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-07-07-javascript-note-three/</guid><description><![CDATA[Chapter Four: Data Structures- Objects and Arrays  Properties that contain functions are generally called methods of the value they belong to. Some methods that array objects have  1 2 3 4 5 6 7 8 9 10 11  var mack = []; mack.push(&#34;Mack&#34;); mack.push(&#34;the&#34;, &#34;Knife&#34;); console.log(mack); // → [&#34;Mack&#34;, &#34;the&#34;, &#34;Knife&#34;] console.log(mack.join(&#34; &#34;)); // → Mack the Knife console.log(mack.pop()); // → Knife console.log(mack); // → [&#34;Mack&#34;, &#34;the&#34;]    Adding and removing things at the start of an array are called unshift and shift.]]></description></item><item><title>JavaScript Note Two</title><link>http://anggao.github.io/2015-06-15-javascript-note-two/</link><pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-06-15-javascript-note-two/</guid><description>Chapter Two: Program Structure Anything that produces a value is an expression in JavaScript The function Number converts a value to a number. The isNaN function is a standard JavaScript function that returns true only if the argument it is given is NaN. Chapter Three: Functions Variables declared outside of any function are called global, because they are visible throughout the program. Functions can be created inside other functions, producing several degrees of locality.</description></item></channel></rss>