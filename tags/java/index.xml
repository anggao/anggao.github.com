<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>java - Tag - Ang's Blog</title><link>http://anggao.github.io/tags/java/</link><description>java - Tag - Ang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 04 Sep 2015 00:00:00 +0000</lastBuildDate><atom:link href="http://anggao.github.io/tags/java/" rel="self" type="application/rss+xml"/><item><title>Java 8 Notes</title><link>http://anggao.github.io/2015-09-04-java-8-notes/</link><pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2015-09-04-java-8-notes/</guid><description><![CDATA[Java 8 useful methods List.sort() 1 2 3 4  List&lt;String&gt; list = ... list.sort(null); // use natural order list.sort((s1, s2) -&gt; s1.compareToIgnoreCase(s2)); // sort ignoring case list.sort(String::compareToIgnoreCase); // same with a method reference   List.removeIf() 1 2 3 4 5 6 7 8 9 10 11  /* old way */ Iterator&lt;String&gt; it = list.iterator(); while(it.hasNext()) { String s = it.next(); if (s.length() %2 == 0) { it.remove(); } } /* java 8 */ list.]]></description></item><item><title>Jackson: JSON parsing and generation library</title><link>http://anggao.github.io/2014-12-08-jackson-json-parsing-and-generation-library/</link><pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2014-12-08-jackson-json-parsing-and-generation-library/</guid><description>使用 Jackson 加入jar 包： jackson-annotation-2.2.3.jar jackson-core-2.2.3.jar jackson-databind-2.2.3.jar 创建 com.fasterxml.jackson.databind.ObjectMapper 调用ObjectMapper 的 writeValueAsString 方法把Java对象或集合转为json字符串. Jackson 根据getter来定位Java</description></item><item><title>JavaWeb Listener</title><link>http://anggao.github.io/2014-11-21-javaweb-listener/</link><pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2014-11-21-javaweb-listener/</guid><description>Servlet 监听器 Servlet监听器：Servlet 规范中定义的一种特殊类，它用于监听 web 应用程序中的 ServletContext, HttpSession 和 ServletRequest 等域对象的创建与销毁事件，以及监听这些域</description></item><item><title>JavaWeb Filter</title><link>http://anggao.github.io/2014-11-16-javaweb-filter/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2014-11-16-javaweb-filter/</guid><description>Filter 是什么 JavaWeb 的一个重要组件，可以对发送到 Servlet 的请求进行拦截，并对响应也可以进行拦截 Filter 是实现了 Filter 接口的 Java 类 Filter 需要在 web.xml 文件中进行配置和映射 如何创建 Filter</description></item><item><title>Cookie &amp; HttpSession</title><link>http://anggao.github.io/2014-11-14-cookie-httpsession/</link><pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2014-11-14-cookie-httpsession/</guid><description>Cookie 完成会话跟踪的一种机制: 采用的是在客户端保持 HTTP 状态信息的方案 Cookie是在浏览器访问 WEB 服务器的某个资源时，由 WEB 服务器在 HTTP 响应消息头中附带</description></item><item><title>JDBC Notes</title><link>http://anggao.github.io/2014-11-10-jdbc-notes/</link><pubDate>Mon, 10 Nov 2014 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2014-11-10-jdbc-notes/</guid><description><![CDATA[JDBC Architecture JDBC API 1 2 3 4 5 6 7 /* Use Driver directly, should use DriverManager instead */ Driver driver = (Driver) Class.forName(driverClass).newInstance(); Properties info = new Properties(); info.put(&#34;user&#34;, user); info.put(&#34;password&#34;, password); Connection connection = driver.connect(jdbcUrl, info); 加载与注册 JDBC 驱动 加载 JDBC 驱动需调用 Class 类的静态方法 forName(]]></description></item><item><title>Effective Java: Item 02 Builder Pattern</title><link>http://anggao.github.io/2013-06-11-effective-java-item-2-builder-pattern/</link><pubDate>Tue, 11 Jun 2013 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2013-06-11-effective-java-item-2-builder-pattern/</guid><description>Builder pattern is used to tackle problem where class contains a large number of optional parameters, besides builder pattern there are two other methods: Telescoping constructor pattern and JavaBeans Pattern, they all have some limits.
The telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it In JavaBeans Pattern: JavaBean may be in an inconsistent state partway through its construction The JavaBeans Pattern precludes the possibility of making a class immutable The Builder pattern simulates named optional parameters in Python The Builder pattern is a good choice between when designing classes whose constructors or static factories would have more than a handful of parameters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // Telescoping constructor pattern - does not scale well!</description></item><item><title>Effective Java: Item 01 Static Factory Method</title><link>http://anggao.github.io/2013-06-07-effective-java-item1-static-factory-method/</link><pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2013-06-07-effective-java-item1-static-factory-method/</guid><description>A class can provide a public static factory method, which is simply a static method that returns an instance of the class.
Providing a static factory method instead of a public constructor has both advantages and disadvantages:
One advantage of static factory methods is that, unlike constructors, they have names, it can highlight differences between overloaded constructors. A second advantage of static factory methods is that, unlike constructors, they are not required to create a new obj each time they&amp;rsquo;re invoked.</description></item><item><title>Design Pattern: Singleton</title><link>http://anggao.github.io/2013-05-22-design-pattern-singleton/</link><pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate><author>Author</author><guid>http://anggao.github.io/2013-05-22-design-pattern-singleton/</guid><description>Singleton pattern ensures that there is only one instance of a class is created in JVM. It is used to provide global point of access to the object.
###Implementation example: Lazy initialization
1 2 3 4 5 6 7 8 9 10 11 12 public class Singleton { private static Singleton instance; private Singleton() { } public static Singleton getInstance() { if (instance == null) instance = new Singleton(); return instance; } } ###Implementation example: Eager initialization</description></item></channel></rss>